#![feature(test)]

extern crate test;

use std::string::{String, ToString};
use std::vec::Vec;

use base64;
use data_encoding;

use base64_jdk;

pub static ENCODED_1: &str = "TWF1";
pub static ENCODED_10: &str = "cmdWcTRWSGtmYUhx";
pub static ENCODED_50: &str = "ZXBueFd1alQwRUZkaGk3bVNXOHhReThoZGRWd1ZQa2llSUxzVG9HakYxYnptbUFmUjlp";
pub static ENCODED_100: &str = "Y2hqMHk1OVd3MXBiZlVFeFpVa1M3dXhVcmlVZVpUWWpBYVZEYmE0dndwbWxtTkRVY2RraHNNeWtVSDZjNmRNUjB0SjNVZDdKcVdhTlhkM2pxZGU3TEw4R3lObWU2T2VUbWxsaWNV";
pub static ENCODED_500: &str = "S0R3R3AwYnAxNGc2UnpueXhzMUVuNkc1MEFaMThPMTg5TWlHaWduMUVrcUFKa05Fem1kTjRFSlAyVUVOOTY2MVpTSDZpZHM3VTdZRFJEZ2JXckZSTHRLa05iRnQ0cHJHclliMTlOZkU5bGlKcnZiR0IxVG5tR0dHckNEVFFqSFo5UVk2VW16UVpkbEJieWNvUEl6YmtuYkF0OVg3c2FKWGZzYlhvMmNSSGdSR0FQQVVxeGU2Tk03RUpBSXN2VnZXRnBlN2hDekFWa0dVS0ZxdmM4cVlIWTNwbEI1RXJoSVdyVXpZekJyU3JOU2UyOEkzbU1GS2dTNVF0Y2Y2WDRCMmpWNFNYVmg1V3V1ZkR3ZFpiZnFnMlFZU2xUZEE1bG1IRXdVMURTMDR2U0FsTmNHRXpWckxPYmNlV0tucUxjRTNZV2x0b1pHbk9JcXRoNXZEaEhjQm00Zm5xN2huclh3NDFXVFB2QjJ1aXR0UmtOaHdocTBlSnhlMHJtb2RyZ2c3SnIzakFwZWNUYTlQRnV6NE9PZDR3TmNMeHBqaTBmNUtDc24yOHJsRUxwN1Z2M0F4Nk45dkVvSnhrY0FlWW9RUjlrdkhZMW9kN3loa2pWaUM0c2xwb3NjWUJjMEVndEdacW5VUWIyRkVobEJDeUhrdXp2MWNl";
pub static ENCODED_1000: &str = "VVBEQ3VGNW0yRlBQUGdaeXh6YVdGWXYxMG5UVWYyM1M1OFU1a0RDeWRYRjRyUDdBN1dFUGdROUt3akc1WDA2VGo2MXQ3Uk5HNFRDWEpYR0JrVm1pSGhack91RmNnVDR4TDRBc0R4d3dtd2N2bHlKU1RqUXZkem43MHd1SXhYZVVBbnI5bUw4TjhyalBnWG5CakRNZWNhZUUxOElWbXcyZ3F1MjFHaDR1N0ZZeHcwSG1SQUtRcFFQWFNGNzVka2Jjb3NVT1AzT1VNVjd6ZFNxYTVhckRDM2pUT3F4N0llaVc1TzNIa2hqblo0dVdJeElVUnZOaVppbDZZNXNCUTJUSkpldldQN1dIaVdOWEprYU92WU9qMjg0Z0NHeXptYlZJN3ZvSnM0eVdLZUdNdWhSYk9Sczg5aEk2dmlVY25ZNmoyVHE5Q2UyYlNLMlZtRkxQaVd0bzdFQ0IzYzBDeFZsbUtaVGtyOHRtMUpUT2hadVltOXlVbkQxdHRzc3ZSemcwZVhFMVdjREZjUmZ1dEZINENHeEdqYU9sUTJxaktkTElaQ0ZBejcxNnJMa096SkdHSDRrRXVza2UyVDhPT3R4Y2xWZ3JHcktNMTh5YXJiS0xBalBYYkJudWlHVTRUUFMxUDkzZHJyRExIbklJTlpDeTExdXJyNHFEMWNhODkxZUlzZ1FFQ3F6d0piY1NiTFlFMTVZNzhqS1VtdmYwQ2RpNW1ZTTM0MlVKU3QyVjZQSHRybkFmZXVvT1o2ZGtKNjlrV014ck10ZldES0VzZ01jNHlLU1hudEpIZHhpbFpYVFNwZk5Lb0hLWk9IbWRKSEFuRVlVWUNnTk9waExiQ2NRNHNKazQ3aWpGTWZRWklPV1Q2Y1NDdHI1VzlHS0dBb1BPb2dPQnczMmFDektJbjR4dmhxREdPZ3ZMcTUwR3Y4QzdKYk1ZODdEMHdtTGNhS2FON1JCbFU1bGRUWDFqdmlGNGZmV21IQ2Y1VkhMRzJXbjZWS0xyMXBqVlFwdExiZlZITGxoTjd1WTR1WkdjSmRuNm1ZTmtmTWhPSWFRWHJ2d0tTaFU1RkZucTlzZHI5bnBCYUNaSU4xNEM0bFpId09KUXoySzl6OHJtSkRZSlQ4R0RLVFNLeDBVNmJaR0ZBM3VzN0dxelBoc0VKUXhpWktIbVRlekpQVTRPUlAwYm5TUzgwd2FaSlR4V3Zic0hUeXEyTjQ0RjZYM0lhcTMwaHdpVGtBTDdoUWRoWVBYUGEybXl2Z0lvNE16UWtwUFBPTms2bzlOM3lCUjA1TVk0VXZPbmdOZ0R2RUZXZ2xaMlpwZmpoQ1lhZnFxdVRv";
pub static ENCODED_10000: &str = "";

pub struct TestData {
    pub encoded: String,
    pub size: usize,
}

impl TestData {
    pub fn new(encoded: &str, size: usize) -> TestData {
        TestData {
            encoded: encoded.to_string(),
            size,
        }
    }

    pub fn get_payload(self) -> Vec<u8> {
        base64_decode_config(&self.encoded)
    }
}

pub fn get_all_test_data() -> Vec<TestData> {
    vec![
        TestData::new(ENCODED_1, 1),
        TestData::new(ENCODED_10, 10),
        TestData::new(ENCODED_50, 50),
        TestData::new(ENCODED_100, 100),
        TestData::new(ENCODED_500, 500),
        TestData::new(ENCODED_1000, 1000),
        TestData::new(ENCODED_10000, 10000),
    ]
}

#[inline]
pub fn base64_decode_config(s: &String) -> Vec<u8> {
    base64::decode_config(s, base64::STANDARD_NO_PAD).unwrap()
}

#[inline]
pub fn base64_decode_config_buf_no_prealloc(s: &String) -> Vec<u8> {
    let mut buffer = Vec::<u8>::new();
    base64::decode_config_buf(s, base64::STANDARD_NO_PAD, &mut buffer).map(|_| buffer).unwrap()
}

#[inline]
pub fn base64_decode_config_buf_excessive_alloc(s: &String) -> Vec<u8> {
    let mut buffer = Vec::<u8>::with_capacity(s.len() * 4 / 3);
    base64::decode_config_buf(s, base64::STANDARD_NO_PAD, &mut buffer).map(|_| buffer).unwrap()
}

#[inline]
pub fn base64_decode_config_slice(s: &String) -> Vec<u8> {
    let mut buffer = Vec::<u8>::with_capacity((s.len() + 3) * 3 / 4);
    unsafe {
        let mut sl = std::slice::from_raw_parts_mut(buffer.as_mut_ptr(), buffer.capacity());
        let size = base64::decode_config_slice(s, base64::STANDARD_NO_PAD, &mut sl).unwrap();
        buffer.set_len(size);
    }
    buffer
}

#[inline]
pub fn base64_decode_config_slice_memset(s: &String) -> Vec<u8> {
    let mut buffer = vec![0; (s.len() + 3) * 3 / 4];
    let size = base64::decode_config_slice(s, base64::STANDARD_NO_PAD, &mut buffer).unwrap();
    buffer.truncate(size);
    buffer
}

#[inline]
pub fn crypto2_decode_config(s: &String) -> Vec<u8> {
    crypto2::encoding::base64::decode_with_config(s, crypto2::encoding::base64::DEFAULT_CONFIG).unwrap()
}

#[inline]
pub fn jdk_decode(s: &String) -> Vec<u8> {
    base64_jdk::decode(s, base64_jdk::STANDARD_NO_PAD).unwrap()
}

#[inline]
pub fn base64_encode_config(s: &Vec<u8>) -> String {
    base64::encode_config(s, base64::STANDARD_NO_PAD)
}

#[inline]
pub fn crypto2_encode_config(s: &Vec<u8>) -> String {
    crypto2::encoding::base64::encode_with_config(s, crypto2::encoding::base64::DEFAULT_CONFIG)
}

#[inline]
pub fn jdk_encode(s: &Vec<u8>) -> Vec<u8> {
    base64_jdk::encode(s, base64_jdk::STANDARD_NO_PAD)
}

#[inline]
pub fn jdk_encode_measter(s: &Vec<u8>) -> Vec<u8> {
    base64_jdk::encode_measter(s, base64_jdk::STANDARD_NO_PAD)
}

#[inline]
pub fn data_encoding_encode(s: &Vec<u8>) -> String {
    data_encoding::BASE64_NOPAD.encode(s)
}

#[inline]
pub fn data_encoding_decode(s: &[u8]) -> Vec<u8> {
    data_encoding::BASE64_NOPAD.decode(s).unwrap()
}

pub fn base64simd_encode_to_vec(s: &Vec<u8>) -> Vec<u8> {
    base64_simd::STANDARD_NO_PAD.encode_type(s)
}

#[inline]
pub fn base64simd_encode_to_string(s: &Vec<u8>) -> String {
    base64_simd::STANDARD_NO_PAD.encode_type(s)
}

#[inline]
pub fn base64simd_decode(s: &String) -> Vec<u8> {
    base64_simd::STANDARD_NO_PAD.decode_type(s.as_bytes()).unwrap()
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn encode_successfully() {
        for td in get_all_test_data() {
            let input = td.encoded;
            let payload = base64_decode_config(&input);
            assert_eq!(base64_encode_config(&payload), input);
            assert_eq!(crypto2_encode_config(&payload), input);
            assert_eq!(String::from_utf8(jdk_encode(&payload)).unwrap(), input);
            assert_eq!(String::from_utf8(jdk_encode_measter(&payload)).unwrap(), input);
            assert_eq!(data_encoding_encode(&payload), input);
            assert_eq!(base64simd_encode_to_string(&payload), input);
        }
    }

    #[test]
    fn decode_successfully() {
        for td in get_all_test_data() {
            let input = td.encoded;
            assert_eq!(base64_decode_config(&input), base64_decode_config_slice(&input));
            assert_eq!(base64_decode_config(&input), crypto2_decode_config(&input));
            assert_eq!(base64_decode_config(&input), jdk_decode(&input));
            assert_eq!(base64_decode_config(&input), data_encoding_decode(&input.as_bytes()));
            assert_eq!(base64_decode_config(&input), base64simd_decode(&input));
        }
    }
}
